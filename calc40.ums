# calc40.ums
# Zoe Hsieh and Mikayla Clark
# 4/27/20 - Comp40
#
# registers:
# r0
# r1 - holds the element inputted 
# r2 - pointer of stack of values
# non volatile:
# r3 - current value that's being handled
# r4 - pointer of stack of what will be printed
# volatile:
# r5 - iterator to fill the jumptable
# r6 - temp
# r7 - temp

// initializing temp registers and zero registerr
.section init
    .zero r0
    .temp r6, r7

// allocating space for the jumptable
.section rodata
	jumptable:
  	.space 256

// initialize and set up jumptable
.section init 
    // assign r5 as the iterator because it is volatile 
    r5 := 0

// fills jumptable initially with input_error
initialize_jumptable:
    if (r5 >=s 256) goto jumptable_operations using r1
    
    // initialize displacement in register
    r4 := jumptable + r5
    
    m[r0][r4] := input_error
    r5:= r5 + 1
    goto initialize_jumptable

// set first 10 to 0-9 
    // setting iterator to '0' 
    r3 := '0'

// Looping through to set spots 0-9 to digits 
set_digits:
    if (r3 >s 57) goto jumptable_operations using r1
    r4 := jumptable + r3
    m[r0][r4] := make_digit
    r3 := r3 + 1
    goto set_digits

// handles commands inputted 
jumptable_operations:
    m[r0][jumptable + ' '] := waiting
    m[r0][jumptable + '\n'] := newline
    m[r0][jumptable + '+'] := add
    m[r0][jumptable + '-'] := subtract
    m[r0][jumptable + '*'] := multiply
    m[r0][jumptable + '/'] := divide
    m[r0][jumptable + '|'] := bitwise_or
    m[r0][jumptable + '&'] := bitwise_and
    m[r0][jumptable + '&'] := change_sign
    m[r0][jumptable + '~'] := bitwise_complement
    m[r0][jumptable + 's'] := swap
    m[r0][jumptable + 'd'] := duplicate
    m[r0][jumptable + 'p'] := pop_stack
    m[r0][jumptable + 'z'] := zero_stack
    
    goto waiting

.section text

// user inputted an incorrect element
input_error:
	output "Unknown character: "
	output r1
	output " \n"
	goto waiting

// defines the "entering" function — when an element in inputted
entering: 
	r1 := input()
	
	r3 := ~r1
	if (r3 == 0) goto end
	
	if (r1 <s '0') goto jump_to using r3
	if (r1 >s '9') goto jump_to using r3
	goto make_num

// defines the "waiting" function — when program is waiting for number
// to be called
waiting:
	r1:= input()
	
	r3 := ~r1
	if (r3 == 0) goto end
	
	jump_to:
		r5 := jumptable + r1 
		r5 := m[r0][r5]
		goto r5

// ending the program
end: 
	halt

// pops the previously stored digit off the stack
// and mixes it with the most recently read-in digit to
// store numbers with more than one digit
make_num:
	pop r3 off stack r2
	r3 := r3 * 10
	r3 := r3 + r1
	r3 := r3 - 48
	
	push r3 on stack r2 
	goto entering 

// pushes digit read into the program onto the stack
make_digit: 
	r3 := r1 - 48        // not ascii character value
	push r3 on stack r2 
	goto entering

// handles errorc case if not inputs were given
no_inputs:
	output "No inputs given, expected at least 1 input\n"
	goto waiting

// when the function needs one more digit to perform
// the command
missing_inputs:
	push r4 on stack r2
	
	output "Needs at least one more input \n"
	goto waiting

// Checking that there's at least one number
one_digit:

    .temps r5, r6, r7

    if (r2 == val_stack_bot) goto no_inputs

    pop r4 off stack r2
    .temps r6, r7

    goto r1 // go back to the caller

// Checking that there's at least two numbers
two_digits:

    .temps r5, r6, r7

    if (r2 == val_stack_bot) goto no_inputs

    pop r4 off stack r2

    if (r2 == val_stack_bot) goto missing_inputs

    pop r3 off stack r2
    .temps r6, r7

    goto r1 // go back to caller

// pops first two vals from stack and pushes
// the sum back to the stack
add:
	goto two_digits linking r1
	
	r3 := r3 + r4
	push r3 on stack r2
	
	goto waiting

// pops first two vals from stack and pushes
// the difference back to the stack
subtract:
	goto two_digits linking r1
	
	r3 := r3 - r4
	push r3 on stack r2
	
	goto waiting

// pops the first two vals and pushes
// the result back to the stack
multiply:
	goto two_digits linking r1
	
	r3 := r3 * r4
	push r3 on stack r2
	goto waiting

// first checks for edge cases, then
// pops the first two vals from the stack and
// pushes the result back to the stack

// edge cases include: dividing by zero, first number
// is negative, or the second number is negative
divide:
	goto two_digits linking r1

	if ( r4 == 0 ) goto divide_zero
	if (r3 <s 0) goto first_neg using r1
	if (r4 <s 0) goto second_neg using r1
	
	r3 := r3 / r4
	push r3 on stack r2
	goto waiting

// handles the edge division case that the 
// first number is negative	
first_neg:
	r3 := r3 / r4
	
	if (r4 <s 0) goto two_neg using r1
	
	push r3 on stack r2
	goto waiting

// handles the edge division case that the
// second number is negative
second_neg:
	r3 := r3 / r4
	r3 := 0 - r3
	push r3 on stack r2
	goto waiting

// handles the edge division case that both
// numbers are negative
two_neg:
    r3 := 0 - r3
    r4 := 0 - r4
    r3 := r3 / r4

    push r3 on stack r2
    goto waiting

// handles the edge division case that
// the second number is 0
divide_zero:
	push r3 on stack r2
	push r3 on stack r2
	output "Can't divide by zero \n"
	goto waiting

// performs the bitwise or function after popping
// two vals from the stack
bitwise_or:
	goto two_digits linking r1
	
	r3 := r3 | r4
	push r3 on stack r2
	goto waiting

// performs the bitwise and function after popping
// two vals from the stack
bitwise_and:
	goto two_digits linking r1
	
	r3 := r3 & r4
	push r3 on stack r2
	goto waiting

// changes the sign of the number 
// to negative after popping it from stack
// and pushes it back to the stack
change_sign:
	goto one_digit linking r1
	
	r4 := 0 - r4
	push r4 on stack r2
	goto waiting

// performs the bitwise complement function	after
// popping one val from the stack
bitwise_complement:
	goto one_digit linking r1
	r4 := ~ r4
	push r4 on stack r2
	goto waiting

// performs the swap function after popping
// two vals from the stack and pushes the 
// reversed order from the stack
swap:
	goto two_digits linking r1
	
	push r4 on stack r2
	push r4 on stack r2
	goto waiting

// performs the duplicate function by popping
// one val from stack and pushing it back onto 
// stack twice
duplicate:
	goto one_digit linking r1
	
	push r4 on stack r2
	push r4 on stack r2
	goto waiting

// pops value from stack but does not return
// it to stack ever again — value is "deleted"	
pop_stack:
	goto one_digit linking r1
	goto waiting

// performs the deletion function by removing 
// all values from stack
zero_stack:
	r2 := val_stack_bot
	goto waiting
