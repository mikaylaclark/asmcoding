/* check if there's one or values given, and push onto stack */

.section init
    .zero r0
    .temp r6, r7

.section rodata
	jumptable:
  	.space 256

/* initialize and set up jumptable */
.section init 
    /* using r5 as the iterator because it is volatile */
    r5 := 0

initialize_jumptable:
    if (r5 >=s 256) goto jumptable_operations # TODO - need an s???
    
    /* initialize displacement in register */
    r4 := jumptable + r5
    
    m[r0][r4] := input_error
    r5:= r5 + 1
    goto initialize_jumptable

/* set first 10 to 0-9 */
    /* setting iterator to '0' */
    r3 := '0'

/* Looping through to set spots 0-9 to digits */
set_digits:
    if (r3 >s 57) goto jumptable_operations
    r4 := jumptable + r3
    m[r0][r4] := digit
    r3 := r3 + 1
    goto set_digits

jumptable_operations:
    r4 := jumptable + ' '
    m[r0][r4] := waiting
    r4 := jumptable + '\n'
    m[r0][r4] := newline
    r4 := jumptable + '+'
    m[r0][r4] := add
    r4 := jumptable + '-'
    m[r0][r4] := subtract
    r4 := jumptable + '*'
    m[r0][r4] := multiply
    r4 := jumptable + '/'
    m[r0][r4] := divide
    r4 := jumptable + '|'
    m[r0][r4] := bitwise_or
    r4 := jumptable + '&'
    m[r0][r4] := bitwise_and
    r4 := jumptable + 'c'
    m[r0][r4] := change_sign
    r4 := jumptable + '~'
    m[r0][r4] := bitwise_complement
    r4 := jumptable + 's'
    m[r0][r4] := swap
    r4 := jumptable + 'd'
    m[r0][r4] := duplicate
    r4 := jumptable + 'p'
    m[r0][r4] := pop
    r4 := jumptable + 'z'
    m[r0][r4] := zero_stack






    