# registers:
# r0
# r1
# r2 - pointer of stack of values
# r3 - current value that's being handled
# r4 - pointer of stack of what will be printed
# r5
# r6 - temp
# r7 - temp

.section text

newline:
  r4 := print_stack_bot
  
  empty_val_stack:
    .temps r1, r6, r7
    if (r2 == val_stack_bot) goto empty_print_stack
    
    .temp r6, r7
    pop r3 off stack r2
    push r3 on stack r4
    
    goto print_digits
    
  empty_print_loop:
    .temps r1, r6, r7
    if (r4 == print_stack_bot) goto waiting
    
    pop r3 off stack r4
    push r3 on stack r2
    
    goto empty_print_stack
  
print_digits:
  output ">>> "
  
  if (r3 == 0) goto print_zero
  if (r3 == 0x80000000) goto print_most_neg using r1
  if (r3 >s 0) goto init_loop
  
  
 
  output '-'
  r3 := 0 - r3
  
  print_zero:
    output "0/n"
    goto empty_val_stack
    
  print_most_neg:
    output "-2147483648\n"
    goto empty_vstack
    
  init_loop:
    r1 := 0
  
  store_loop:
    r1 := r1 + 1
    
    r5 := r3 mod 10
    push r5 on stack r4 // stores first digit onto the print stack
    
    r3 := r3 / 10
    
    if (r3 != 10) goto store_loop // next digit place
    
  print_recurs:
    r1 := r1 - 1 // keeps track of # of digits
    
    pop r3 off stack r4
    output r4
    
    if (r1 != 0) goto print_recurs
    
    output '\n'
    
    goto empty_val_stack
  
 
    
  
  
  
  
  
