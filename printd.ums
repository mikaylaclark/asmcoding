# printd.ums
# Zoe Hsieh and Mikayla Clark
# 4/27/20 - Comp40
#
# registers:
# r0
# r1 - used as a loop counter instead
# r2 - pointer of stack of values
# non volatile:
# r3 - current value that's being handled
# r4 - pointer of stack of what will be printed
# volatile:
# r5 
# r6 - temp
# r7 - temp

.section text

// prints contents of the value stack
newline:
  r4 := print_stack_bot
  
  // empties the value stack by moving everything into print stack
  empty_val_stack:
    .temps r1, r6, r7
    if (r2 == val_stack_bot) goto empty_print_loop
    
    .temps r6, r7
    pop r3 off stack r2
    push r3 on stack r4
    
    goto print_digits
  
  // empties the print stack by putting everything into 
  // value stack
  empty_print_loop:
    .temps r1, r6, r7
    if (r4 == print_stack_bot) goto waiting
    
    .temps r6, r7

    pop r3 off stack r4
    push r3 on stack r2
    
    goto empty_print_loop

// loop function that prints number stored in r3
print_digits:
  output ">>> "
  
  // need to put most neg value into r5 to load the wide value
  r5 := 0x80000000

  if (r3 == 0) goto print_zero
  if (r3 == r5) goto print_most_neg using r1
  if (r3 >s 0) goto init_loop using r1
 
  output '-'
  r3 := 0 - r3
  
  // prints 0
  print_zero:
    output "0/n"
    goto empty_val_stack
  
  // prints the most negative number
  print_most_neg:
    output "-2147483648\n"
    goto empty_val_stack
  
  // initializes the start of the loop counter
  init_loop:
    r1 := 0
  
  // counts how many digits there are, and stores in the 
  // print stack in order
  store_loop:
    // iterator incrementing by 1
    r1 := r1 + 1
    
    r5 := r3 mod 10
    push r5 on stack r4 // stores first digit onto the print stack
    
    r3 := r3 / 10
    
    if (r3 != 0) goto store_loop // next digit place
  
  
  // recursive function -- prints each digit
  // runs r1 times
  print_recurs:
    r1 := r1 - 1 // keeps track of # of digits
    
    pop r3 off stack r4
    r3 := r3 + 48
    output r3
    
    if (r1 != 0) goto print_recurs
    
    output '\n'
    
    goto empty_val_stack
  
 
    
  
  
  
  
  
